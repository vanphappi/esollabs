import { ChannelConfig, CommunicationLayerPreference, DappMetadata, DisconnectOptions, ECIESProps, KeyInfo, RemoteCommunication, StorageManagerProps } from '@metamask/sdk-communication-layer';
import { MetaMaskInstaller } from '../Platform/MetaMaskInstaller';
import { PlatformManager } from '../Platform/PlatfformManager';
import { MetaMaskSDK } from '../sdk';
import { SDKLoggingOptions } from '../types/SDKLoggingOptions';
import { ProviderService } from './ProviderService';
export interface RemoteConnectionProps {
    timer?: {
        runBackgroundTimer?: (cb: () => void, ms: number) => number;
        stopBackgroundTimer?: () => void;
    };
    communicationLayerPreference: CommunicationLayerPreference;
    dappMetadata?: DappMetadata;
    _source?: string;
    enableDebug?: boolean;
    sdk: MetaMaskSDK;
    transports?: string[];
    platformManager: PlatformManager;
    communicationServerUrl?: string;
    ecies?: ECIESProps;
    storage?: StorageManagerProps;
    logging?: SDKLoggingOptions;
    getMetaMaskInstaller: () => MetaMaskInstaller;
    connectWithExtensionProvider?: () => void;
    modals: {
        onPendingModalDisconnect?: () => void;
        install?: (params: {
            link: string;
            debug?: boolean;
            installer: MetaMaskInstaller;
            terminate?: () => void;
            connectWithExtension?: () => void;
        }) => {
            unmount?: (shouldTerminate?: boolean) => void;
            mount?: (link: string) => void;
        };
        otp?: (onDisconnect?: () => void) => {
            mount?: () => void;
            updateOTPValue?: (otpValue: string) => void;
            unmount?: () => void;
        };
    };
}
export declare class RemoteConnection implements ProviderService {
    private connector;
    private universalLink?;
    private developerMode;
    private authorized;
    private communicationLayerPreference;
    private platformManager;
    private pendingModal?;
    private installModal?;
    private options;
    /**
     * Wait for value from metamask mobile
     */
    private otpAnswer?;
    constructor(options: RemoteConnectionProps);
    private initializeConnector;
    private setupListeners;
    /**
     * Display the installation modal
     *
     * @param param.link link of the qrcode
     * @returns
     */
    private showInstallModal;
    /**
     * This will start the installer or pending modal and resolve once it is displayed.
     * It doesn't wait for the actual connection to be authorized.
     */
    startConnection(): Promise<void>;
    private reconnectWithModalOTP;
    private connectWithDeeplink;
    private connectWithModalInstaller;
    getUniversalLink(): string;
    showActiveModal(): void;
    getChannelConfig(): ChannelConfig | undefined;
    getKeyInfo(): KeyInfo | undefined;
    getConnector(): RemoteCommunication;
    getPlatformManager(): PlatformManager;
    isConnected(): boolean;
    isAuthorized(): boolean;
    isPaused(): boolean;
    disconnect(options?: DisconnectOptions): void;
}
//# sourceMappingURL=RemoteConnection.d.ts.map